// #################################################################################
/** INITIALIZATION AND PARAMETER SETTING */
// #################################################################################

initialize() {
	// parameters in script call
	//	defineConstant("envSeed", 1);
	//	defineConstant("slimSeed", 1);
	//	defineConstant("CURRENT_DIRECTORY", "/Users/teaganbaiotto/Mirror/Research/ER");
	// defineConstant("sigma_p", 0.1);
	// defineConstant("lambda_o", 0.25);
	// defineConstant("sigma_fitness", 0.25);
	// defineConstant("sigma_qtl", 0.1);
	// defineConstant("carrying_cap", 1000);
	// defineConstant("ENV_ACLEN", 0.1);
	// defineConstant("p_QTL", 0.05);
	
	// parameters in call to run slim
	defineConstant("ENV_SEED", asInteger(envSeed));
	defineConstant("ENV_AMP", 1.0);
	defineConstant("ENV_ACLEN", asFloat(envAcLen));
	defineConstant("HL_SEED", 4);
	defineConstant("HL_AMP", 1.0);
	defineConstant("HL_ACLEN", 0.05);
	defineConstant("SLiM_SEED", asInteger(slimSeed));
	defineConstant("SIGMA_P", asFloat(sigma_p)); // PERCEPTION DISTANCE lower value makes competition much stronger at very local scale, high value is at more global scale, prefers "clustering" of individuals
	defineConstant("LAMBDA_O", asFloat(lambda_o)); // mean number of offspring per mating event
	defineConstant("SIGMA_FITNESS", asFloat(sigma_fitness)); // standard deviation of gaussian function that does phenotype-environment fitness mapping
	defineConstant("SIGMA_QTL", asFloat(sigma_qtl));			// standard deviation of mutational effect size - for trait 1
	defineConstant("K", asInteger(carrying_cap));
	defineConstant("p_QTL", asFloat(pQTL));
	
	setSeed(SLiM_SEED);
	
	initializeSLiMModelType("nonWF");
	
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	
	// Genomic element params
	defineConstant("C_num", 20);							// number of chromosomes
	defineConstant("C_lengths", rep(50000, C_num));	// lengths for each chromosome
	
	defineConstant("MU_base", 1e-7);						// base mutation rate overall
	defineConstant("MU", MU_base * p_QTL);	// mut rate for QTNs specifically
	defineConstant("R", 1e-6);	// recombination rate
	
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0);   // QTL
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, sum(C_lengths[0:asInteger((C_num/2 - 1))]));
	
	rates = c(rep(c(R, 0.5), C_num-1), R);
	ends = repEach(cumSum(C_lengths), 2);
	ends = ends[0:(length(ends) - 2)];
	ends = ends + c(rep(c(0,1), C_num-1), 0);
	initializeRecombinationRate(rates, ends);
	
	
	// Length of simulation
	defineConstant("BURN_1", 5000); // length of first burn in
	defineConstant("BURN_2", 5000); // length of second burn in
	defineConstant("SIM_LEN", 350); // length of final sim
	
	// trait Variance
	defineConstant("SIGMA_K_1", 0.99);						// smaller is stronger stabilizing selection, // larger is weaker (wider) stabilizing selection for trait 1
	defineConstant("SIGMA_STAT", 4.0);					// burn-in stabilizing selection function variance
	
	// QTL-related constants used below
	defineConstant("QTL_mu", 0);
	
	// Use Tree Seq -> for faster sims
	initializeTreeSeq();
	
	// environmental preference - offset from mean in landscape
	defineConstant("ENV_OFFSET", 0.0); //must be type FLOAT
	
	// Landscape Parameters
	defineConstant("PERIODIC_X", T);
	
	// habitat loss
	defineConstant("PROPORTION_LOSS", 0.667);
	
	// environmental change
	defineConstant("DELTA_ENV", 2.0);
	defineConstant("DELTA_LEN", 100);
	
	// interactions
	// based on Haller et al. 2013 (https://doi.org/10.1086/671907)
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SIGMA_P * 3);     // competition
	i1.setInteractionFunction("n", 1.0, SIGMA_P);
	
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SIGMA_P * 3);     // mate choice
	i2.setInteractionFunction("f", 1.0);
	
	// output files
	defineConstant('OUT_FILE', paste0(CURRENT_DIRECTORY, '/outputs/spatial/spinup_files/', asString(ENV_SEED), "_", asString(SLiM_SEED), '_', SPINUP_SUFFIX, 'populations.txt'));
	defineConstant('MUT_FILE', paste0(CURRENT_DIRECTORY, '/outputs/spatial/spinup_files/', asString(ENV_SEED), "_", asString(SLiM_SEED), '_', SPINUP_SUFFIX, 'muts.txt'));
}

///
// #################################################################################
/**  REPRODUCTION AND MUTATION EFFECT CALLBACKS */
// #################################################################################
reproduction(NULL) {
	mate = i2.nearestInteractingNeighbors(individual);
	if (!mate.size())
		return;
	mate = sample(mate, 1);
	
	for (i in seqLen(rpois(1, LAMBDA_O)))
	
	{
		pos = individual.spatialPosition;
		offspring = subpop.addCrossed(individual, mate);
		offspring.setSpatialPosition(p1.pointPeriodic(pos));
	}
}

mutationEffect(m1)
{
	return 1.0; // Since we are using QTL model
}

mutation(m1) {
	// draw mutational effects for the new m1 mutation
	fit_effects = rnorm(1, QTL_mu, SIGMA_QTL);
	mut.setValue("e1", fit_effects);
	return T;
}

///
// #################################################################################
/**  ADD POPULATIONS AND LANDSCAPE */
// #################################################################################

1 early() {
	// when to cause habitat destruction
	community.rescheduleScriptBlock(s1, start=(BURN_1 + BURN_2), end=(BURN_1 + BURN_2));
	
	sim.addSubpop("p1", 1000);
	p1.individuals.setSpatialPosition(p1.pointUniform(1000));
	
	
	// Generate an autocorrelated landscape map
	m = generateLandscape(seed = ENV_SEED, slope=0.0, curvature=0.0, amplitude=ENV_AMP, aclength=ENV_ACLEN, periodic_x=PERIODIC_X);
	
	m = m - ENV_OFFSET;                // center to have a mean of 0
	sim.setValue("m", m);  				  // save in memory for use later
	
	
	// assign map as environment for simulation
	p1.defineSpatialMap("ENV", "xy", m, interpolate=F,
		valueRange=c((-3 - ENV_OFFSET), (3 - ENV_OFFSET)), colors=c("blue", "yellow"));
	
	// assign dummy map for HL
	p1.defineSpatialMap("HL", "xy", matrix(rep(1, 4), nrow=2), interpolate=F,
		valueRange=c(0, 1), colors=c("red", "green"));
}


///
// #################################################################################
/**  PHENOTYPE/FITNESS CALCULATION */
// #################################################################################

// Get parameters of beta distribution for this organism
1 early() {
	// get max possible fitness value according to distribution
	defineConstant("FITNESS_MAX", dnorm(0.0, 0, SIGMA_FITNESS));
}

2: first() {
	// AGING
	// simple case here - if age > 10, kill
	sim.killIndividuals(p1.individuals[p1.individuals.age>10]);
	
	// HABITAT LOSS
	if (sim.cycle > (BURN_1 + BURN_2)) {
		landscape_effect = p1.spatialMapValue("HL", p1.individuals.spatialPosition);
		
		sim.killIndividuals(p1.individuals[landscape_effect==0]);
	}
}

1: early() { // fitness calculations and habitat choice
	
	inds = p1.individuals;
	
	if (length(inds) > 0)
	{
		// #################	
		// CURRENT POSITION
		// #################	
		sim.setValue('oldPos', sim.subpopulations.individuals.spatialPosition);
		// COMPETITION
		// competition based on local density - make sure this is right
		i1.evaluate(p1);
		competition = i1.totalOfNeighborStrengths(inds);
		competition = (competition + 1) / (2 * PI * SIGMA_P^2);
		sim.setValue('ind_fits_oldPos', K/competition);// add in effect of competition/density dependence on fitness - double check this
		
		// PHENOTYPE-ENVIRONMENT MATCHING
		for (ind in inds)
		{
			// construct phenotypes from additive effects of QTL mutations
			muts = ind.genomes.mutationsOfType(m1);
			ind.setValue("phenotype", size(muts) ? sum(muts.getValue("e1")) else 0.0);
		}
		
		// get environmental condition from map
		envs = p1.spatialMapValue("ENV", inds.spatialPosition);
		
		// get phenotype
		phenotypes = inds.getValue("phenotype");
		
		// get fitness of each individual
		fits = getFits(phenotypes, envs);
		
		sim.setValue('ind_fits_oldPos', fits * sim.getValue('ind_fits_oldPos'));
		
		
		// #################	
		// NEW POSITION
		// #################	
		oldPos = sim.getValue('oldPos');
		newPos = oldPos + runif(length(oldPos), -0.1, 0.1);
		sim.subpopulations.individuals.setSpatialPosition(p1.pointPeriodic(newPos));
		sim.setValue('newPos', sim.subpopulations.individuals.spatialPosition);
		
		// COMPETITION
		// competition based on local density - make sure this is right
		i1.unevaluate(); // reset evaluation so we can check new position
		i1.evaluate(p1);
		competition = i1.totalOfNeighborStrengths(inds);
		competition = (competition + 1) / (2 * PI * SIGMA_P^2);
		sim.setValue('ind_fits_newPos', K/competition);// add in effect of competition/density dependence on fitness - double check this
		
		// PHENOTYPE-ENVIRONMENT MATCHING
		// get environmental condition from map
		envs = p1.spatialMapValue("ENV", inds.spatialPosition);
		
		// get phenotype
		phenotypes = inds.getValue("phenotype");
		
		// get fitness of each individual
		fits = getFits(phenotypes, envs);
		
		sim.setValue('ind_fits_newPos', fits * sim.getValue('ind_fits_newPos'));
		
		
		// #################	
		// HABITAT CHOICE (CHOOSE OLD/NEW POSITION)
		// #################	
		oldPos = sim.getValue('oldPos');
		newPos = sim.getValue('newPos');
		
		ind_fits_oldPos = sim.getValue('ind_fits_oldPos');
		ind_fits_newPos = sim.getValue('ind_fits_newPos');
		ind_fits = ind_fits_newPos; // set fit as at new position for convenience below
		
		// iterate over individuals
		i = 0;
		for (ind in p1.individuals){
			
			if (ind_fits_oldPos[i] > ind_fits_newPos[i]){
				ind_fits[i] = ind_fits_oldPos[i]; // if old position was better, set fitness value for that location
				ind.setSpatialPosition(oldPos[(2*i):(2*i+1)]); // move to old position if that was better
			}
			i = i + 1;
		}
		
		// #################	
		// SET FITNESS
		// #################	
		// set fitness scaling
		inds.fitnessScaling = ind_fits; // add fitness effect of phenotype-environment compatibility
		
		// color individuals based on their phenotype for y-cline related trait
		inds.color = p1.spatialMapColor("ENV", phenotypes);
	} else {
		sim.simulationFinished();
	}
}

2: first() {
	i2.evaluate(p1);
}

// END
s1 late() // end sim
{
	sim.outputFull(OUT_FILE);
	!writeFile(MUT_FILE, paste(sortBy(sim.mutations, "id").getValue("e1")));
	
	sim.simulationFinished();
}




///
// #################################################################################
/** DEFINE ADDITIONAL FUNCTIONS */
// #################################################################################
function (float)generateLandscape(i$ seed, f$ slope, f$ curvature, f$ amplitude, f$ aclength, [i$ minSize = 256], [l$ periodic_x = T])
{
	// generates spatially autocorellated landscape
	// function from B.C. Haller, R. Mazzucco, U. Dieckmann. (2013). Evolutionary branching in complex landscapes. American Naturalist 182(4), E127–E141. https://doi.org/10.1086/671907
	
	code = 	"source('" + CURRENT_DIRECTORY + "/script/R/landscape_ac.R');" +
		"m <- generateLandscape(" + seed + ", " + slope + ", " + curvature + ", "
		+ amplitude + ", " + aclength + ", " + minSize + ", " + periodic_x + ");" +
		"cat(as.vector(m));";
	args = c("--vanilla", "-e", "\"" + code + "\"");
	m = system("/usr/bin/Rscript", args);
	//	m = system("/usr/local/bin/Rscript", args);
	
	if (size(m) == 0)
		stop("An error occurred in landscape generation");
	
	m = asFloat(strsplit(m, " "));
	l = asInteger(sqrt(size(m)));
	m = matrix(m, nrow=l, ncol=l, byrow=F);
	catn("// generated landscape is " + l + " x " + l);
	catn("//    range [" + min(m) + ", " + max(m) + "]");
	catn("//    sd " + sd(m));
	return m;
}

function (float)generateHL(i$ seed, f$ slope, f$ curvature, f$ amplitude, f$ aclength, [i$ minSize = 256], [l$ periodic_x = T], [f$ proportion_loss=0.5])
{
	// generates spatially autocorellated landscape
	// function from B.C. Haller, R. Mazzucco, U. Dieckmann. (2013). Evolutionary branching in complex landscapes. American Naturalist 182(4), E127–E141. https://doi.org/10.1086/671907
	
	code = 	"source('" + CURRENT_DIRECTORY + "/script/R/landscape_ac.R');" +
		"m <- generateHL(" + seed + ", " + slope + ", " + curvature + ", "
		+ amplitude + ", " + aclength + ", " + minSize + ", " + periodic_x + ", " + proportion_loss + ");" +
		"cat(as.vector(m));";
	args = c("--vanilla", "-e", "\"" + code + "\"");
	m = system("/usr/bin/Rscript", args);
	//	m = system("/usr/local/bin/Rscript", args);
	
	if (size(m) == 0)
		stop("An error occurred in landscape generation");
	
	m = asFloat(strsplit(m, " "));
	l = asInteger(sqrt(size(m)));
	m = matrix(m, nrow=l, ncol=l, byrow=F);
	return m;
}

function (float)getFits(f ind_phenotypes, f prefered_phenotypes)
{
	// Uses paramters defined in model (upper case)
	// fitness effect - related to how well their phenotype matches their environment and is dictated by the organism-specific curve
	fitness_burnin_variance = ifelse(sim.cycle < (BURN_1 + BURN_2), SIGMA_K_1 * ((sim.cycle - BURN_1) / (BURN_1)) + SIGMA_STAT * (1.0 - (sim.cycle - BURN_1) / (BURN_1)), SIGMA_K_1);
	
	// Here, we are getting the phenotype of an individual as the sum of QTLs, and then adding fitnessScaling object based on phenotype-environment matching (as defined by organism-specific curve)
	scaled_phenotypes = ((asFloat(ind_phenotypes) - prefered_phenotypes)/sqrt(fitness_burnin_variance));
	fits = dnorm(scaled_phenotypes, 0.0, SIGMA_FITNESS)/FITNESS_MAX; // phenotype to fitness
	
	return fits;
}
